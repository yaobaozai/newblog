(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{382:function(t,s,a){"use strict";a.r(s);var e=a(44),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"git-的工作区域和流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-的工作区域和流程"}},[t._v("#")]),t._v(" Git 的工作区域和流程")]),t._v(" "),a("p",[t._v("要想弄懂 Git 是怎么对我们的代码进行管理的，那首当其冲的是了解 Git 的工作区域是如何构成的。因为，只有彻底弄懂了 Git 工作区域的构成，你才可以在适当的区域使用合适的命令。如下图所示，此图包含了 Git 的 4 个工作区和一些常见的操作。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ec7210655b4d4fc4afcd1466d9aa2343~tplv-k3u1fbpfcp-watermark.awebp",alt:"git"}})]),t._v(" "),a("p",[t._v("Workspace：工作区，就是平时进行开发改动的地方，是当前看到最新的内容，在开发的过程也就是对工作区的操作")]),t._v(" "),a("p",[t._v("Index：暂存区，当执行 "),a("code",[t._v("git add")]),t._v(" 的命令后，工作区的文件就会被移入暂存区，暂存区标记了当前工作区中那些内容是被 Git 管理的，当完成某个需求或者功能后需要提交代码，第一步就是通过 "),a("code",[t._v("git add")]),t._v(" 先提交到暂存区。")]),t._v(" "),a("p",[t._v("Repository：本地仓库，位于自己的电脑上，通过 "),a("code",[t._v("git commit")]),t._v(" 提交暂存区的内容，会进入本地仓库。")]),t._v(" "),a("p",[t._v("Remote：远程仓库，用来托管代码的服务器，远程仓库的内容能够被分布在多个地点的处于协作关系的本地仓库修改，本地仓库修改完代码后通过 "),a("code",[t._v("git push")]),t._v(" 命令同步代码到远程仓库。")]),t._v(" "),a("p",[t._v("一般来说，Git 的工作流程分为以下几步")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(".在工作区开发，添加，修改文件。\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(".将修改后的文件放入暂存区。\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(".将暂存区域的文件提交到本地仓库。\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(".将本地仓库的修改推送到远程仓库。\n复制代码\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h2",{attrs:{id:"git-基本操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-基本操作"}},[t._v("#")]),t._v(" Git 基本操作")]),t._v(" "),a("h3",{attrs:{id:"git-add"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-add"}},[t._v("#")]),t._v(" git add")]),t._v(" "),a("p",[t._v("添加文件到暂存区")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加某个文件到暂存区，后面可以跟多个文件，以空格区分")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" xxx\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加当前更改的所有文件到暂存区。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n复制代码\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h4",{attrs:{id:"git-commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-commit"}},[t._v("#")]),t._v(" git commit")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 提交暂存的更改，会新开编辑器进行编辑")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 提交暂存的更改，并记录下备注")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"you message"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 等同于 git add . && git commit -m")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -am\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 对最近一次的提交的信息进行修改,此操作会修改commit的hash值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit --amend\n复制代码\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("h3",{attrs:{id:"git-pull"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-pull"}},[t._v("#")]),t._v(" git pull")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从远程仓库拉取代码并合并到本地，可简写为 git pull 等同于 git fetch && git merge")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程主机名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程分支名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(":"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("本地分支名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用rebase的模式进行合并")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull --rebase "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程主机名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程分支名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(":"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("本地分支名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n复制代码\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h3",{attrs:{id:"git-fetch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-fetch"}},[t._v("#")]),t._v(" git fetch")]),t._v(" "),a("p",[t._v("与 "),a("code",[t._v("git pull")]),t._v(" 不同的是 "),a("code",[t._v("git fetch")]),t._v(" 操作仅仅只会拉取远程的更改，不会自动进行 merge 操作。对你当前的代码没有影响")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取远程仓库特定分支的更新")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程主机名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("分支名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取远程仓库所有分支的更新")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch --all\n复制代码\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h3",{attrs:{id:"git-branch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-branch"}},[t._v("#")]),t._v(" git branch")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 新建本地分支，但不切换")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看本地分支")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看远程分支")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -r\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看本地和远程分支")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -a\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除本地分支")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -D "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch-nane"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重新命名分支")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -m "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("old-branch-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("new-branch-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n复制代码\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])]),a("h2",{attrs:{id:"工作中使用-git-解决问题的场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工作中使用-git-解决问题的场景"}},[t._v("#")]),t._v(" 工作中使用 Git 解决问题的场景")]),t._v(" "),a("h3",{attrs:{id:"git-rebase-让你的提交记录更加清晰可读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-rebase-让你的提交记录更加清晰可读"}},[t._v("#")]),t._v(" git rebase 让你的提交记录更加清晰可读")]),t._v(" "),a("h4",{attrs:{id:"git-rebase-的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-rebase-的使用"}},[t._v("#")]),t._v(" git rebase 的使用")]),t._v(" "),a("p",[t._v("rebase 翻译为变基，他的作用和 merge 很相似，用于把一个分支的修改合并到当前分支上。")]),t._v(" "),a("p",[t._v("如下图所示，下图介绍了经过 rebase 后提交历史的变化情况。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b169721a6bfc42a7b4754f7c5d65672d~tplv-k3u1fbpfcp-watermark.awebp",alt:"WechatIMG2.png"}})]),t._v(" "),a("p",[t._v("现在我们来用一个例子来解释一下上面的过程。")]),t._v(" "),a("p",[t._v("假设我们现在有 2 条分支，一个为 master，一个为 feature/1，他们都基于初始的一个提交 add readme 进行检出分支，之后，master 分支增加了 3.js 和 4.js 的文件，分别进行了 2 次提交，feature/1 也增加了 1.js 和 2.js 的文件，分别对应以下 2 条提交记录。")]),t._v(" "),a("p",[t._v("此时，对应分支的提交记录如下。")]),t._v(" "),a("p",[t._v("master 分支如下图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/64147d864ec44c3494560c3547010bbe~tplv-k3u1fbpfcp-watermark.awebp",alt:"image-20210531144909187.png"}})]),t._v(" "),a("p",[t._v("feature/1 分支如下图")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/81543f378abd4a16bf74947d2200ffa9~tplv-k3u1fbpfcp-watermark.awebp",alt:"image-20210531145504071.png"}})]),t._v(" "),a("p",[t._v("结合起来看是这样的")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/35519191523f4568bf6135bfcfb223a2~tplv-k3u1fbpfcp-watermark.awebp",alt:"image-20210531145553107.png"}})]),t._v(" "),a("p",[t._v("此时，切换到 feature/1 分支下，执行 "),a("code",[t._v("git rebase master")]),t._v("，成功之后，通过 "),a("code",[t._v("git log")]),t._v(" 查看记录。")]),t._v(" "),a("p",[t._v("如下图所示：可以看到先是逐个应用了 mater 分支的更改，然后以 master 分支最后的提交作为基点，再逐个应用 feature/1 的每个更改。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fcb57edd0b594ff6ad7bc7d25ba128f9~tplv-k3u1fbpfcp-watermark.awebp",alt:"image-20210531150719965.png"}})]),t._v(" "),a("p",[t._v("所以，我们的提交记录就会非常清晰，没有分叉，上面演示的是比较顺利的情况，但是大部分情况下，rebase 的过程中会产生冲突的，此时，就需要手动解决冲突，然后使用依次 "),a("code",[t._v("git add")]),t._v(" 、"),a("code",[t._v("git rebase --continue")]),t._v(" 的方式来处理冲突，完成 rebase 的过程，如果不想要某次 rebase 的结果，那么需要使用 "),a("code",[t._v("git rebase --skip")]),t._v(" 来跳过这次 rebase 操作。")]),t._v(" "),a("h4",{attrs:{id:"git-merge-和-git-rebase-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-merge-和-git-rebase-的区别"}},[t._v("#")]),t._v(" git merge 和 git rebase 的区别")]),t._v(" "),a("p",[t._v("不同于 "),a("code",[t._v("git rebase")]),t._v(" 的是，"),a("code",[t._v("git merge")]),t._v(" 在不是 fast-forward（快速合并）的情况下，会产生一条额外的合并记录，类似 "),a("code",[t._v("Merge branch 'xxx' into 'xxx'")]),t._v(" 的一条提交信息。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14b182abe7c54161959596eb5b140299~tplv-k3u1fbpfcp-watermark.awebp",alt:"image-20210531151838328.png"}})]),t._v(" "),a("p",[t._v("另外，在解决冲突的时候，用 merge 只需要解决一次冲突即可，简单粗暴，而用 rebase 的时候 ，需要依次解决每次的冲突，才可以提交。")]),t._v(" "),a("h4",{attrs:{id:"git-rebase-交互模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-rebase-交互模式"}},[t._v("#")]),t._v(" git rebase 交互模式")]),t._v(" "),a("p",[t._v("在开发中，常会遇到在一个分支上产生了很多的无效的提交，这种情况下使用 rebase 的交互式模式可以把已经发生的多次提交压缩成一次提交，得到了一个干净的提交历史，例如某个分支的提交历史情况如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ee27b108f03443a58c19600cac7ddf70~tplv-k3u1fbpfcp-watermark.awebp",alt:"image-20210518211345258.png"}})]),t._v(" "),a("p",[t._v("进入交互式模式的方式是执行：")]),t._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase -i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("base-commit"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n复制代码\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("参数 "),a("code",[t._v("base-commit")]),t._v(" 就是指明操作的基点提交对象，基于这个基点进行 rebase 的操作，对于上述提交历史的例子，我们要把最后的一个提交对象（ ac18084 ）之前的提交压缩成一次提交，我们需要执行的命令格式是：")]),t._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase -i ac18084\n复制代码\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("此时会进入一个 vim 的交互式页面，编辑器列出的信息像下列这样。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3fd2ea54dbbe4c88a51fc652c6b1e86f~tplv-k3u1fbpfcp-watermark.awebp",alt:"image-20210518212036198.png"}})]),t._v(" "),a("p",[t._v("想要合并这一堆更改，我们要使用 Squash 策略进行合并，即把当前的 commit 和它的上一个 commit 内容进行合并， 大概可以表示为下面这样，在交互模式的 rebase 下，至少保留一个 pick，否则命令会执行失败。")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("pick  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\ns     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\ns     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\ns     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n复制代码\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("修改文件后 按下 "),a("code",[t._v(":")]),t._v(" 然后 "),a("code",[t._v("wq")]),t._v(" 保存退出，此时又会弹出一个编辑页面，这个页面是用来编辑提交的信息，修改为 "),a("code",[t._v("feat: 更正")]),t._v("，最后保存一下，接着使用 "),a("code",[t._v("git branch")]),t._v(" 查看提交的 commit 信息，rebase 后的提交记录如下图所示，是不是清爽了很多？rebase 操作可以让我们的提交历史变得更加清晰。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2586ec49060f4dfc9006c8f3fc532260~tplv-k3u1fbpfcp-watermark.awebp",alt:"image-20210518212812000.png"}})]),t._v(" "),a("blockquote",[a("p",[t._v("特别注意，只能在自己使用的 feature 分支上进行 rebase 操作，不允许在集成分支上进行 rebase，因为这种操作会修改集成分支的历史记录。")])]),t._v(" "),a("h4",{attrs:{id:"使用-git-cherry-pick-获取指定的-commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-git-cherry-pick-获取指定的-commit"}},[t._v("#")]),t._v(" 使用 git cherry-pick 获取指定的 commit")]),t._v(" "),a("p",[a("code",[t._v("git cherry-pick")]),t._v(" 可以理解为”挑拣”提交，和 merge 合并一个分支的所有提交不同的是，它会获取某一个分支的单笔提交，并作为一个新的提交引入到你当前分支上。当我们需要在本地合入其他分支的提交时，如果我们不想对整个分支进行合并，而是只想将某一次提交合入到本地当前分支上，那么就要使用 "),a("code",[t._v("git cherry-pick")]),t._v(" 了。")]),t._v(" "),a("p",[t._v("如下场景，以下有三条分支，feature/cherry-pick1 和 feature/cherry-pick2 都是基于 master 检出的两条功能性分支，对应的分支 log 记录如下")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/66e205eb421841bfa476167e6fd7c581~tplv-k3u1fbpfcp-watermark.awebp",alt:"image-20210518221001432.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c5743a18a0c24b3aa085db3d7a620742~tplv-k3u1fbpfcp-watermark.awebp",alt:"image-20210518221010458.png"}})]),t._v(" "),a("p",[t._v("master 分支的提交如下 "),a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/64fe055a5e764ff58e85923314096f9e~tplv-k3u1fbpfcp-watermark.awebp",alt:"image-20210518221051734.png"}})]),t._v(" "),a("p",[t._v("现在 master 只需要 feature/cherry-pick1 和 feature/cherry-pick2 有关 change 的修改，并不关心有关 fix 内容的修改。此时就可以用 cherry-pick 指令了。")]),t._v(" "),a("p",[t._v("语法： "),a("code",[t._v("git cherry-pick [commit-hash]")])]),t._v(" "),a("p",[t._v("commit-hash 表示的是某次 commit 的 hash 值。现在，依次执行以下两条指令 "),a("code",[t._v("git cherry-pick e0bb7f3")]),t._v("、"),a("code",[t._v("git cherry-pick c9a3101")]),t._v("，过程中，如果出现冲突，解决冲突后 进行 "),a("code",[t._v("git add")]),t._v("，接着执行 "),a("code",[t._v("git cherry-pick --continue")]),t._v("，最后，master 上的提交如下")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/38f9c71679824941abdf98b769b9a062~tplv-k3u1fbpfcp-watermark.awebp",alt:"image-20210518235707190.png"}})]),t._v(" "),a("p",[t._v("此时，master 分支上应用了需要的提交，就达到了我们想要的效果。如果需要多个 cherry-pick 需要同步到目标分支，可以简写为 "),a("code",[t._v("git cherry-pick <first-commit-id>...<last-commit-id>")]),t._v("，这是一个左开右闭的区间，也就时说 "),a("code",[t._v("first-commit-id")]),t._v(" 提交带来的代码的改动不会被合并过去，如果需要合并过去，可以使用 "),a("code",[t._v("git cherry-pick <first-commit-id>^...<last-commit-id>")]),t._v("，它表示包含 "),a("code",[t._v("first-commit-id")]),t._v(" 到 "),a("code",[t._v("last-commit-id")]),t._v(" 在内的提交都会被合并过去。")]),t._v(" "),a("h4",{attrs:{id:"使用-git-revert-回滚某次的提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-git-revert-回滚某次的提交"}},[t._v("#")]),t._v(" 使用 git revert 回滚某次的提交")]),t._v(" "),a("p",[t._v("想象这么一个场景，你的项目最近有 2 个版本要上线，这两个版本还伴随着之前遗留的 bug 的修复，一开始的时候，你将 bug 修复在了第一个版本的 release 分支上，突然在发版前一天，测试那边反馈，需要把第一个版本修复 bug 的内容改在第二个版本上，这个时候，第一个版本的集成分支的提交应该包括了第一个版本的功能内容，遗留 bug 修复的提交和其他同事提交的内容，想要通过 reset 的方式粗暴摘除之前的关于 bug 修复的 commit 肯定是不行的，同时，这种做法比较危险，此时，我们既不想破坏之前的提交记录，又想撤回我们遗留 bug 的 commit 记录应该怎么做呢？git revert 就派上了用场。")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("git revert")]),t._v(" 撤销某次操作，此操作不会修改原本的提交记录，而是会新增一条提交记录来抵消某次操作。")])]),t._v(" "),a("p",[t._v("语法： "),a("code",[t._v("git revert <commit-id>")]),t._v(" 针对普通 commit")]),t._v(" "),a("p",[a("code",[t._v("git revert <commit-id> -m")]),t._v(" 针对 merge 的 commit")]),t._v(" "),a("p",[t._v("下面就用一个案例来理解一下这个命令，如下图所示，假设被红框框起来的地方是会引起 bug 的一次提交，在他的提交之后，又进行了 2 次提交，其中包含了其它同事的提交。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f36331158e084072a033802bf4fa0478~tplv-k3u1fbpfcp-watermark.awebp",alt:"image-20210519142702752.png"}})]),t._v(" "),a("p",[t._v("此时想把引起提交的 bug 的干掉，执行 "),a("code",[t._v("git revert 1121932")]),t._v("，执行操作后，再打开查看日志，如下图所示，可以看到是新增了一条 commit 记录，这个 commit 的产生的 msg 是自动生成的，Revert 开头，后面跟撤回的 commit-msg 信息 之前的 commit 记录并没有消失，此时也达到了代码回退的效果")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9729e537218e4609b54df3e899fd332f~tplv-k3u1fbpfcp-watermark.awebp",alt:"image-20210519142824836.png"}})]),t._v(" "),a("p",[t._v("此外 git revert 也可以回滚多次的提交")]),t._v(" "),a("p",[t._v("语法："),a("code",[t._v("git revert [commit-id1] [commit-id2] ...")]),t._v(" 注意这是一个前开后闭区间，即不包括 commit1 ，但包括 commit2 。")]),t._v(" "),a("p",[t._v("回滚我们的提交有二种方式，一种是上文提到的"),a("code",[t._v("git revert")]),t._v("命令外，还可以使用 "),a("code",[t._v("git reset")]),t._v(" 命令，那么它们两者有什么区别呢？")]),t._v(" "),a("p",[a("code",[t._v("git revert")]),t._v(" 会新建一条 commit 信息，来撤回之前的修改。")]),t._v(" "),a("p",[a("code",[t._v("git reset")]),t._v(" 会直接将提交记录退回到指定的 commit 上。")]),t._v(" "),a("p",[t._v("对于个人的 feature 分支而言，可以使用 "),a("code",[t._v("git reset")]),t._v(" 来回退历史记录，之后使用 "),a("code",[t._v("git push --force")]),t._v(" 进行推送到远程，但是如果是在多人协作的集成分支上，不推荐直接使用 "),a("code",[t._v("git reset")]),t._v(" 命令，而是使用更加安全的 "),a("code",[t._v("git revert")]),t._v(" 命令进行撤回提交。这样，提交的历史记录不会被抹去，可以安全的进行撤回。")]),t._v(" "),a("h4",{attrs:{id:"使用-git-stash-来暂存文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-git-stash-来暂存文件"}},[t._v("#")]),t._v(" 使用 git stash 来暂存文件")]),t._v(" "),a("p",[t._v("会有这么一个场景，现在你正在用你的 feature 分支上开发新功能。这时，生产环境上出现了一个 bug 需要紧急修复，但是你这部分代码还没开发完，不想提交，怎么办？这个时候可以用 "),a("code",[t._v("git stash")]),t._v(" 命令先把工作区已经修改的文件暂存起来，然后切换到 hotfix 分支上进行 bug 的修复，修复完成后，切换回 feature 分支，从堆栈中恢复刚刚保存的内容。")]),t._v(" "),a("p",[t._v("基本命令如下")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash //把本地的改动暂存起来\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash save "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"message"')]),t._v(" 执行存储时，添加备注，方便查找。\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash pop // 应用最近一次暂存的修改，并删除暂存的记录\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash apply  // 应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即 stash@"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("，如果要使用其他个，git stash apply stash@"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$num")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" 。\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash list // 查看 stash 有哪些存储\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("clear")]),t._v(" // 删除所有缓存的 stash\n复制代码\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("下面通过几幅图对 stash 的命令做进一步了解。")]),t._v(" "),a("p",[t._v("此时，我正在开发一个新功能，修改了 1.js 文件里的内容")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cd64645d30734e68a4e4349ea94ee064~tplv-k3u1fbpfcp-watermark.awebp",alt:"image-20210519175036869.png"}})]),t._v(" "),a("p",[t._v("还没开发完成，这个时候，我想切换到 hotfix 分支上修复 bug，得暂停下开发切换到 hotfix 分支，但是现在工作区还有内容，此时如果切换分支 Git 会报出下面的错误")]),t._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("error: Your "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("local")]),t._v(" changes to the following files would be overwritten by checkout:\n        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(".js\nPlease commit your changes or stash them before you switch branches.\nAborting\n复制代码\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("上面那句话的意思就是说工作区有文件修改，不能提交，需要先进行 commit 或者 stash 操作，执行 "),a("code",[t._v("git stash")]),t._v("，结果如下")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("Saved working directory and index state WIP on stash: 22e561c feat: "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(".js\n复制代码\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("此时，我们的工作区已经干净了，可以切换到 hotfix 分支进行 bug 修复的工作，假设我们现在 bug 修复完成了，继续切回 feature 分支进行原本功能的开发，此时只需要执行 "),a("code",[t._v("git stash pop")]),t._v("，之前我们暂存的修改就会恢复到工作区，如下图所示。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4f4f3a3b24e042868829315b3209b760~tplv-k3u1fbpfcp-watermark.awebp",alt:"image-20210519185011012.png"}})]),t._v(" "),a("p",[t._v("当我们想要暂存文件，切换分支做某些事的时候，可以用 "),a("code",[t._v("git stash")]),t._v(" 这种机制帮助开发。")]),t._v(" "),a("p",[t._v("推荐在使用 stash 的相关命令时，每一次暂存的时候，不要直接使用 "),a("code",[t._v("git stash")]),t._v(" 命令进行暂存下来，而是使用 "),a("code",[t._v('git stash save "message..."')]),t._v(" 这种方式，给本次的提交做一个信息的记录。这样，想应用更改的时候，先通过 "),a("code",[t._v("git stash list")]),t._v(" 查看一下所有的暂存列表。之后，推荐使用 "),a("code",[t._v("git stash apply stash@${num}")]),t._v(" 的方式进行应用对应的 stash，这样不会清空已有的 stash 的列表项，并且能应用到当前的工作区，不需要这个暂存的话，再手动清除就可以了。")]),t._v(" "),a("h4",{attrs:{id:"不同的工作区域撤销更改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不同的工作区域撤销更改"}},[t._v("#")]),t._v(" 不同的工作区域撤销更改")]),t._v(" "),a("p",[t._v("开发中，我们经常需要回退代码的操作，在不同的工作区域中，回退代码的方式也是不相同的。如下图所示，假设现在要在 feature/revoke 分支上进行开发,")]),t._v(" "),a("p",[t._v("首先通过 "),a("code",[t._v("git status")]),t._v(" 查看下现在的状态。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a4ede8763be443868de951dc08721c1a~tplv-k3u1fbpfcp-watermark.awebp",alt:"image-20210520115802579.png"}})]),t._v(" "),a("p",[t._v("目前我们的工作区是很干净的，没有任何修改的操作，此时，修改一下代码再次查看状态，可以看到，1.js 这个文件被修改了。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/371084f06fca40778b2f95900ebf19b6~tplv-k3u1fbpfcp-watermark.awebp",alt:"image-20210520115934693.png"}})]),t._v(" "),a("p",[t._v("现在我们想把 1.js 这个文件恢复到修改前的状态，即撤回工作区的修改，就可以使用 "),a("code",[t._v("git checkout -- <filename>")]),t._v(" 的命令，如果要撤回多个文件的修改，文件之间使用空格隔开，如下图所示，我们撤回了 1.js 文件的修改，工作区也恢复干净了。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/02da2adecc3b43bd917294c203596d1e~tplv-k3u1fbpfcp-watermark.awebp",alt:"image-20210520120242475.png"}})]),t._v(" "),a("p",[t._v("如果说现在我们对文件进行了修改，并且已经提交到暂存区了，这部分文件我们不想要的话，那么就可以通过 "),a("code",[t._v("git reset <filename>")]),t._v(" 的命令来对特定的文件进行撤销，"),a("code",[t._v("git reset")]),t._v(" 会撤回所有存在暂存区的文件，如下图所示，查看前后的状态可知，文件最后成功撤回到工作区了。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c0d6b5e17ec341afb86e1e9732f2ded9~tplv-k3u1fbpfcp-watermark.awebp",alt:"image-20210520141538130.png"}})]),t._v(" "),a("h4",{attrs:{id:"配置-git-alias-提升工作效率"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置-git-alias-提升工作效率"}},[t._v("#")]),t._v(" 配置 git alias 提升工作效率")]),t._v(" "),a("p",[t._v("一般我们在工作中，接到开发任务后，需要新创建一个分支进行开发 此时需要 用到 "),a("code",[t._v("git branch")]),t._v("、"),a("code",[t._v("git checkout")]),t._v("、 "),a("code",[t._v("git pull")]),t._v(" 等命令，在我们一顿操作后，开发完成，到了提交代码的阶段，又要诸如此类 "),a("code",[t._v("git add")]),t._v(" 、"),a("code",[t._v("git commit")]),t._v("、"),a("code",[t._v("git push")]),t._v(" 等命令，虽然简单，但是输入起来也是不够简洁，作为一个程序员，开发程序就是为了提高我们的效率的，懒是人类进步的源泉，所以我们可以通过配置别名的方式，简化这些命令。")]),t._v(" "),a("p",[t._v("它的基本用法是 "),a("code",[t._v("git config --global alias.<简化的字符> 原始命令")])]),t._v(" "),a("p",[t._v("如下面的例子：")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global alias.co checkout\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global alias.ci commit\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global alias.br branch\n复制代码\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("这里将 co 表示 checkout，ci 表示 commit，br 表示 branch，以后提交就可以简写成")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f9e4b6e415724ddbbeb85958b0e2ba05~tplv-k3u1fbpfcp-watermark.awebp",alt:"image-20210519152804390.png"}})]),t._v(" "),a("p",[a("code",[t._v("--global")]),t._v(" 是全局参数，也就是配置一次后，这些命令可以在这台电脑下的所有仓库都适用。这些命令其实是更新你全局的 .gitconfig 文件，该文件用来保存全局的 git 配置，"),a("code",[t._v("vim ~/.gitconfig")]),t._v("，执行这段命令后，显示如下，下图展示了刚才通过 "),a("code",[t._v("git config --global alias")]),t._v(" 添加的 "),a("code",[t._v("alias")]),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6abbadf7e542451f808b79a644158bf6~tplv-k3u1fbpfcp-watermark.awebp",alt:"image-20210519153624712.png"}})]),t._v(" "),a("p",[t._v("除了上面那种直接通过命令的方式外，也可以通过修改这个文件的 "),a("code",[t._v("alias")]),t._v(" 项来设置别名。")]),t._v(" "),a("p",[t._v("这里分享一个我自己常用的别名设置，把以下配置替换到 .gitconfig 文件里的 "),a("code",[t._v("[alias]")]),t._v(" 所属的区域，然后就可以愉快的使用了~")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("alias"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nst "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" status -sb\nco "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" checkout\nbr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" branch\nmg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" merge\nci "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" commit\nds "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" --staged\ndt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" difftool\nmt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mergetool\nlast "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" log -1 HEAD\nlatest "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" for-each-ref --sort"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("-committerdate --format"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v('"%'),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("committername"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("@%"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("refname:short"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("%"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("committerdate:short"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" %"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("contents"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v('"\n'),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" log --pretty"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("format:"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v('"%C'),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("yellow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("%h %C"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("blue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("%ad %C"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("red"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("%d %C"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reset"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("%s %C"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("green"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("%cn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v('" --decorate --date'),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("short\nhist "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" log --pretty"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("format:"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v('"%C'),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("yellow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("%h %C"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("red"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("%d %C"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reset"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("%s %C"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("green"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("%an"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" %C"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("blue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("%ad"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v('" --topo-order --graph --date'),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("short\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cat-file -t\ndump "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cat-file -p\nlg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" log --color --graph --pretty"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("format:"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'")]),t._v(" --abbrev-commit\n复制代码\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br")])]),a("p",[t._v("这样，我们每次想查看 Git 的历史记录,就不用输入那么一长串命令 直接使用 "),a("code",[t._v("git lg")]),t._v(" ，下图是 axios 源码里的提交记录，使用封装后的 "),a("code",[t._v("git lg")]),t._v(" 查看的效果图")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1f5df1f881fa4c8fac9cc5868b35908a~tplv-k3u1fbpfcp-watermark.awebp",alt:"image-20210519162327693.png"}})]),t._v(" "),a("p",[t._v("分支之间的关系一眼就很明了，在哪个 commit 上进行的 merge 操作也很清晰，可以帮助我们很好的追溯历史的提交和解决问题。")])])}),[],!1,null,null,null);s.default=n.exports}}]);